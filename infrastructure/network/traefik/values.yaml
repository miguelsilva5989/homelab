deployment:
  enabled: true
  kind: DaemonSet # to run on multiple nodes
  # replicas: 3 # match with number of workers
  annotations: {}
  podAnnotations: {}
  additionalContainers: []
  initContainers: []
  dnsConfig:
    options:
      - name: ndots
        value: "1"
  # tolerations:
  #   - key: "node-role.kubernetes.io/master"
  #     operator: "Exists"
  #     effect: "NoSchedule"

# -- This example pod anti-affinity forces the scheduler to put traefik pods
# -- on nodes where no other traefik pods are scheduled.
# It should be used when hostNetwork: true to prevent port conflicts
affinity: {}

service:
  enabled: true
  type: LoadBalancer
  annotations:
    metallb.universe.tf/address-pool: default
    metallb.universe.tf/loadBalancerIPs: 10.69.99.69 # Specific IP from the MetalLB poo
  labels: {}
  # spec:
  #   clusterIP: 10.43.227.9 # Optional: Pin cluster IP for stability
  #   loadBalancerIP: 10.69.99.69 # IP from the MetalLB pool
  #   # loadBalancerIP: 10.69.69.1 # this should be an IP in the Kube-VIP range
  #   loadBalancerIP: 10.69.5.1
  # loadBalancerSourceRanges:
  #   - 10.69.70.1-10.69.99.255
  externalIPs: []

ingressClass:
  enabled: true
  isDefaultClass: true

ports:
  websecure:
    port: 8443
    exposedPort: 443
    # tls:
    #   enabled: true
    #   certResolver: cloudflare # name of the resolver that we set below -> certificatesResolvers: -> **cloudflare**
    transport:
      respondingTimeouts:
        readTimeout: "420s"
        writeTimeout: "420s"
        idleTimeout: "420s"
      lifeCycle:
        requestAcceptGraceTimeout: "5s"
        graceTimeOut: "10s"
      keepAliveMaxRequests: 100
      keepAliveMaxTime: "600s"

ingressRoute:
  dashboard:
    enabled: true

# persistence:
#   enabled: true
#   existingClaim: ssl-certs
#   path: /ssl-certs
#   accessMode: ReadWriteOnce
#   # name: ssl-certs
#   # size: 1Gi
#   # path: /ssl-certs
persistence:
  enabled: true
  name: ssl-certs
  existingClaim: ""  # Set to empty to create a new PVC
  accessMode: ReadWriteMany  # Longhorn supports ReadWriteMany
  size: 128Mi
  storageClass: longhorn
  volumeName: ""  # Let Kubernetes assign a PV
  path: /ssl-certs
  annotations: {}
  subPath: ""

podSecurityContext:
  runAsUser: 65534   # Run as 'nobody' user
  runAsGroup: 65534  # Run as 'nogroup' group
  runAsNonRoot: true

tlsStore:
  default:
    defaultCertificate:
      secretName: wildcard-milanchis-com-tls

# env:
#   - name: CF_API_EMAIL
#     valueFrom:
#       secretKeyRef:
#         key: email
#         name: cloudflare-credentials
#   - name: CF_API_KEY
#     valueFrom:
#       secretKeyRef:
#         key: apiKey
#         name: cloudflare-credentials

# envFrom:
#   - secretRef:
#     name: cloudflare-credentials


providers:  # @schema additionalProperties: false
  kubernetesCRD:
    # -- Load Kubernetes IngressRoute provider
    enabled: true
    # -- Allows IngressRoute to reference resources in namespace other than theirs
    allowCrossNamespace: true
    allowExternalNameServices: true

# certificatesResolvers:
#   cloudflare:
#     # Enable ACME (Let's Encrypt): automatic SSL.
#     acme:
#       # staing server
#       caServer: https://acme-v02.api.letsencrypt.org/directory
#       # Email address used for registration.
#       #
#       # Required
#       #
#       email: "miguelsilva5989@gmail.com"

#       # File or key used for certificates storage.
#       #
#       # Required
#       #
#       storage: "/ssl-certs/acme-cloudflare.json"

#       # Use a TLS-ALPN-01 ACME challenge.
#       #
#       # Optional (but recommended)
#       #
#       # tlsChallenge:

#       # Use a HTTP-01 ACME challenge.
#       #
#       # Optional
#       #
#       # httpChallenge:

#         # EntryPoint to use for the HTTP-01 challenges.
#         #
#         # Required
#         #
#         # entryPoint: web

#       # Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
#       # Note: mandatory for wildcard certificate generation.
#       #
#       # Optional
#       #
#       dnsChallenge:

#         # DNS provider used.
#         #
#         # Required
#         #
#         provider: cloudflare

#         # By default, the provider will verify the TXT DNS challenge record before letting ACME verify.
#         # If delayBeforeCheck is greater than zero, this check is delayed for the configured duration in seconds.
#         # Useful if internal networks block external DNS queries.
#         #
#         # Optional
#         # Default: 0
#         #
#         # delayBeforeCheck: 0

#         # Use following DNS servers to resolve the FQDN authority.
#         #
#         # Optional
#         # Default: empty
#         #
#         resolvers:
#         - "1.1.1.1:53"
#         - "8.8.8.8:53"

